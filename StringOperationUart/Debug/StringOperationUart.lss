
StringOperationUart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000042  00800100  00800100  00000226  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000730  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000686  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000289  00000000  00000000  00001086  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001310  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a4  00000000  00000000  000013a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f0  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001838  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_18>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_19>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 34       	cpi	r26, 0x42	; 66
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
  88:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_18>:
#include <util/setbaud.h>
#define MAX 64
volatile unsigned char buffer [MAX];
volatile int index=0;

ISR(USART_RX_vect) {
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	ef 93       	push	r30
  a0:	ff 93       	push	r31
	char received= UDR0 ;
  a2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	if(received == '\r')
  a6:	8d 30       	cpi	r24, 0x0D	; 13
  a8:	91 f4       	brne	.+36     	; 0xce <__vector_18+0x3e>
	{
		UDR0= buffer[index];
  aa:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ae:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  b2:	ee 5f       	subi	r30, 0xFE	; 254
  b4:	fe 4f       	sbci	r31, 0xFE	; 254
  b6:	80 81       	ld	r24, Z
  b8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		UCSR0B&=~_BV(RXCIE0);
  bc:	e1 ec       	ldi	r30, 0xC1	; 193
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	8f 77       	andi	r24, 0x7F	; 127
  c4:	80 83       	st	Z, r24
		UCSR0B|= _BV(UDRIE0);
  c6:	80 81       	ld	r24, Z
  c8:	80 62       	ori	r24, 0x20	; 32
  ca:	80 83       	st	Z, r24
  cc:	1b c0       	rjmp	.+54     	; 0x104 <__vector_18+0x74>
		
			}
	else
	{
		buffer[index]=received;
  ce:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d2:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d6:	ee 5f       	subi	r30, 0xFE	; 254
  d8:	fe 4f       	sbci	r31, 0xFE	; 254
  da:	80 83       	st	Z, r24
		index++;
  dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if(index>=MAX)
  ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f6:	80 34       	cpi	r24, 0x40	; 64
  f8:	91 05       	cpc	r25, r1
  fa:	24 f0       	brlt	.+8      	; 0x104 <__vector_18+0x74>
		index=0;
  fc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 100:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	
	}
 104:	ff 91       	pop	r31
 106:	ef 91       	pop	r30
 108:	9f 91       	pop	r25
 10a:	8f 91       	pop	r24
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <__vector_19>:
ISR(USART_UDRE_vect)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
 124:	ef 93       	push	r30
 126:	ff 93       	push	r31
	if(index>=0)
 128:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 130:	99 23       	and	r25, r25
 132:	9c f0       	brlt	.+38     	; 0x15a <__vector_19+0x44>
	{
		index--;
 134:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 138:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 142:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		UDR0=buffer[index];
 146:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14a:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 14e:	ee 5f       	subi	r30, 0xFE	; 254
 150:	fe 4f       	sbci	r31, 0xFE	; 254
 152:	80 81       	ld	r24, Z
 154:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 158:	08 c0       	rjmp	.+16     	; 0x16a <__vector_19+0x54>
	}
	else
	{
	UCSR0B&=~_BV(UDRIE0);
 15a:	e1 ec       	ldi	r30, 0xC1	; 193
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	8f 7d       	andi	r24, 0xDF	; 223
 162:	80 83       	st	Z, r24
	UCSR0B|= _BV(RXCIE0);	
 164:	80 81       	ld	r24, Z
 166:	80 68       	ori	r24, 0x80	; 128
 168:	80 83       	st	Z, r24
	}
}
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <uart_in_it>:
void uart_in_it()
{
	UBRR0H=UBRRH_VALUE;
 17c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L=UBRRL_VALUE;
 180:	87 e6       	ldi	r24, 0x67	; 103
 182:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	#if USE_2X
	UCSR0A|=_BV(U2X0);
	#else 
	UCSR0A&=~_BV(U2X0);
 186:	e0 ec       	ldi	r30, 0xC0	; 192
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	8d 7f       	andi	r24, 0xFD	; 253
 18e:	80 83       	st	Z, r24
	#endif
	UCSR0C|=_BV(UCSZ01)|_BV(UCSZ00);
 190:	e2 ec       	ldi	r30, 0xC2	; 194
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	86 60       	ori	r24, 0x06	; 6
 198:	80 83       	st	Z, r24
	UCSR0B|=_BV(RXCIE0)|_BV(RXEN0)|_BV(TXEN0);
 19a:	e1 ec       	ldi	r30, 0xC1	; 193
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	88 69       	ori	r24, 0x98	; 152
 1a2:	80 83       	st	Z, r24
 1a4:	08 95       	ret

000001a6 <main>:
}
int main(void)
{
    uart_in_it();
 1a6:	0e 94 be 00 	call	0x17c	; 0x17c <uart_in_it>
	sei();
 1aa:	78 94       	sei
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <main+0x6>

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
